[
  {
  "description": "The best time to talk with speakers and attendees",
  "id": 307,
  "place": "Hall",
  "service": true,
  "title": "Coffee Break"
  },
  {
  "id": 503,
  "place": "Dining room",
  "service": true,
  "title": "Lunch Break"
  },
  {
  "description": "Okay, it turns out there is an actual human being behind the Siri voice: Susan Bennett, singer, voice actor, and the original voice of Siri on the iPhone 4S and beyond. In her presentation, Susan will give you a peek behind the scenes of the Siri recordings, how they were done, and how the scripts should probably become part of the Smithsonian collection! Susan also talks about the voiceover business, which is how she became the voice of Siri in the first place; she does a lot of different character voices and describes how technology dramatically changed the face of voice recording over the last couple of decades. Finally, Susan discusses the very human emotional challenge of being the voice of Siri, and becoming “Accidentally Famous” as well. Susan’s presentation takes a look at technology from an artist’s point of view…from a human point of view, so relax, bring your lunch and your sense of humor!",
  "id": 1,
  "language": "en",
  "outcome": "- How the Siri recordings were done\n- Where Siri and other digital voices come from\n- Insight into the voiceover and recording businesses\n- How to take the “high road” when faced with a challenge!\n",
  "speakers": [
               1
               ],
  "subtype": "workshop",
  "title": "Accidentally Famous"
  },
  {
  "complexity": "Intermediate",
  "description": "With Swift 5 on the horizon and Swift 6 development soon in full swing, we take a look at the current state of Swift. What's new in Swift 5, and what we can we expect from Swift in the future. Will Swift soon reach World Domination?",
  "id": 2,
  "language": "en",
  "outcome": "- Recent additions to Swift and how they can improve your development\n- What is coming up in future versions of Swift\n- How Swift might reach beyond iOS, macOS, tvOS and watchOS development\n",
  "speakers": [
               2
               ],
  "subtype": "presentation",
  "title": "Swift 5 and Beyond: World Domination?"
  },
  {
  "complexity": "Intermediate",
  "description": "From the onset, Swift was designed to take over the world — or at least the programming world. So it’s no surprise that the development community is excited to bring it’s power to as many platforms as possible. Our eager community was given Swift on Apple platforms, but no sooner than it was open sourced did we get the power to write Swift on Linux (and some people have even figured out how to run it on Android)! In this workshop, we’re going to focus on the first two. Together we’ll build the foundations of a restaurant reservation service. We’ll start by making a server, written in Swift, for our app to interact with. Once we have the server and the app in place, we’ll build a watchOS app so you can our service without having to dig out your phone!",
  "id": 3,
  "language": "en",
  "outcome": "- How to build and deploy a Swift server, using the Perfect framework\n- How to build a simple iPhone app that will interact with data from our server\n- How to more easily debug cross-platform issues\n- How to build a simple Apple Watch app to expand upon already rich features\n",
  "speakers": [
               4
               ],
  "subtype": "workshop",
  "title": "Back to Front to Left Wrist"
  },
  {
  "complexity": "Intermediate",
  "description": "For a topic so fundamental to the practice of software engineering, designing test suites and measuring their efficacy remains difficult. For example, how does one determine the origin of a test failure in the codebase, or know if they’re designing testable components? Beyond that, what are common indicators of an over-tested codebase? Questions like these become more challenging given particular domains and applications, and usually require non-obvious testing strategies.\n\nTo help you answer these questions, this presentation will go through the development process of a thoroughly tested audio synthesizer and demonstrate patterns and methodologies that can help you build a better test suite. By the end of the presentation, you'll have developed a toolkit for building an effective, easy-to-use, and understandable test suite.",
  "id": 4,
  "language": "en",
  "outcome": "- What metrics to consider when measuring the efficacy of your test suite\n- How to intentionally indicate a specific part of your codebase is the source of a failure\n- How a test suite guides your system’s design & eases re-factoring\n- How system boundaries influence a codebase’s testability\n- About collaboration, contract, integration, journey & white box/blackbox tests\n- About system & feature-level testing\n",
  "speakers": [
               3
               ],
  "subtype": "presentation",
  "title": "Patterns & Methodologies for Test Suite Design"
  },
  {
  "description": "iOS technologies are rapidly evolving with every WWDC announcement, and it is increasingly challenging for iOS developers to keep up with the features, innovations, and best practices. It is especially difficult for those preparing for job interviews to navigate the breadth of information available and focus on the most critical topics and skills. Whether you’re a beginner developer seeking that dream job or a seasoned veteran who is ready for a better one — this talk will prepare you to succeed in your next technical iOS interview.",
  "id": 5,
  "language": "en",
  "outcome": "This presentation will give an overview of the most important topics and skills covered in a technical iOS interview including\n  \n  - typical questions during the various interview stages from phone screens to onsites\n  - critical components of the iOS tech stack: UI, networking, storage, design patterns, etc\n  - contemporary best practices\n  - best resources for preparing for technical interviews\n  \nAt the end of this session, the audience will be fully ready to tackle their next iOS interview and know where to go to improve their skills and knowledge in specific topics.\n",
  "speakers": [
               5
               ],
  "subtype": "presentation",
  "title": "iOS Interviews Don’t Have To Be Hard"
  },
  {
  "description": "Understanding Auto Layout is your best chance to write UI code you can be proud of. Its power often underestimated, its features easily misused, I find it overall less appreciated than it could be, if more widely understood.\n\nThis talk is aiming to show how relying heavily on Auto Layout makes you move faster and be more confident writing UI code. Working with the safe area, showing off custom UILayoutGuides and making use of the controversal UIStackViews, we will walk through the simple code of a more complex interface together.\n",
  "id": 6,
  "language": "en",
  "outcome": "- How to express layout fast and simple, without touching Interface Builder\n- How Auto Layout helps to reduce state in your views / view controllers\n- Why the safe area is great and how to rely on it without knowing what device your code is running on\n- When to use custom UILayoutGuides and how they help to avoid using numeric values all around\n- UIStackViews: why they are great, but controversial. How to work with stack views in scrollable layouts\n",
  "speakers": [
               6
               ],
  "subtype": "presentation",
  "title": "The Simple Layout of a Complex Interface"
  },
  {
  "description": "A lot of developers are quick to say that designers should learn to develop. To me, being able to design is an important skill to have as a developer. We all know that there is a significant divide when it comes to designers and developers. This split limits us to be better developers because sometimes we do not want to see the other side of things. Sometimes we as developers do not understand the designer's point of view. Developers and designers have different specialties that we can leverage from each other.\n\nIn this talk, I will discuss the different specialties we can take advantage of from both sides. Additionally, I will cover why you should start picking your designer's brain today. Finally, I will discuss how to get started and what tools designers are using today for doing wireframes to iOS app designs.\n",
  "id": 7,
  "language": "en",
  "speakers": [
               7
               ],
  "subtype": "presentation",
  "title": "Collaboration by Design! “What’chu talkin’ ‘bout, Willis?”"
  },
  {
  "complexity": "Intermediate",
  "description": "My talk will tell our 3 year story as a 2 person independent developer team making the two popular photo and video editing apps Typorama and Videorama, reaching 6M downloads worldwide, generating 1M+ annual revenue on the App Store. I’ll be talking about both the technical and the business tactics and strategies we used to drive downloads and create products loved and used by millions.\n",
  "id": 0,
  "language": "en",
  "outcome": "Learning and using the latest programming technologies and trends is cool, but if you combine that with a business and marketing know-how, developers have a huge potential in their hands to create super profitable micro businesses just on their own. Making a living off the App Store is getting harder each day, and I’ll help the audience learn how to hack their way to success.\n",
  "speakers": [
               8
               ],
  "subtype": "presentation",
  "title": "Story of 2 indie devs, 1M+ annual revenue"
  },
  {
  "complexity": "Advanced",
  "description": "Writing Swift, I have a strong preference for immutable objects, why? Because immutability leads to simplicity and clarity since implicit in an object's creation, is a guarantee that it will never change. \n\nIt is remarkable how much this single, seemingly, simple fact, can make programs easier to verify, and reason about.\n\nBut, in object-oriented environments, blindly defaulting to immutable objects can lead to unintended consequences.\n",
  "id": 0,
  "language": "en",
  "outcome": "- Why immutability. \n- Walk through how I chose an immutable object to solve a problem, how that lead to a perplexing bug, and how I resolved it.\n- Establish when to consider using immutable objects.\n",
  "speakers": [
               12
               ],
  "subtype": "presentation",
  "title": "Mutability: Perks and Quirks"
  },
  {
  "complexity": "Intermediate",
  "description": "Known as “Apple-sanctioned man-in-the-middle attacks,” the `NSURLProtocol` class is a powerful Foundation abstraction that intercepts network requests at runtime before they hit the URL loading system. It has been used to implement proxy-like functionality, stub HTTP responses, eavesdrop on your 3rd party libraries’ network activity during production deployments, arbitrarily transform `URLRequest`s on the fly, or implement custom protocol schemes. Using this class well requires understanding of how it behaves at runtime, and there are a few runtime gotchas that you must know to handle!\n",
  "id": 18,
  "language": "en",
  "outcome": "- How to simplify test suites involving API calls by using `NSURLProtocol` to stub server responses\n- The ability to see HTTP data that 3rd party libraries and frameworks share with their hosts\n- A refresher on the few different method dispatch types in Swift\n- The dark magic that is method swizzling (exchanging method implementations of function pointers at runtime)\n- How to swizzle their way around a critical bug (Apple erroneously sets all HTTP Bodies to `nil`) in `NSURLProtocol`\n- The ability to implement API versioning, synthetic responses, remote cache invalidation, and API rerouting on the client (a lighter weight HAProxy or Varnish)\n",
  "speakers": [
               26
               ],
  "subtype": "presentation",
  "title": "NSURLProtocol: Stupid Secrets, Scary Swizzling, Sorry Safety"
  },
  {
  "complexity": "Intermediate",
  "description": "Swift Evolution is an exhausting thing: high traffic, some signal to noise issues, and a lot of work to follow the ins outs and details. Without voices from the wider developer community, it may not serve the interests you prioritize in your day to day work. From safety to convenience, migration to stability, here's how you can be a part of the process even if you only have a very little time to spend. Apple's open sourced language represents the first time there's a fully open bug reporting system and a way for anyone no matter their background to have their opinions heard and considered. If you're new to Swift Evolution or gave up on it in frustration, let Erica Sadun show you how to make the most of your limited time in having a say in the future of the language.\n",
  "id": 8,
  "language": "en",
  "speakers": [
               13
               ],
  "subtype": "presentation",
  "title": "Swift's Future Belongs To Those Who Show Up"
  },
  {
  "complexity": "Intermediate",
  "description": "Let's be honest here: forms are probably not the shining star of your app. But they're one of the first things a user sees, and can huge stumbling blocks to user trust if you don't give them some thought.\n\nSo take your forms from 😡 to 😍! We'll cover UI basics, implementation details, and UX strategies for building the best forms on the App Store, all with real-world details you can take right back to your desk and start using.\n\nAfter this, your users might even wish for more forms.\n",
  "id": 9,
  "language": "en",
  "outcome": "- Building forms that let your users quickly and easily give you information.\n- Understanding how to get the data your app needs.\n- Learning how to get the user back to the app they love.\n",
  "speakers": [
               16
               ],
  "subtype": "presentation",
  "title": "Great Forms 101"
  },
  {
  "complexity": "Intermediate",
  "description": "The beginning will be a discussion on the struggle/arguments that iOS developers have over which way is better for creating UIs: Storyboards or Programmatic.\n\nThen, I'll present a middle ground that is the main topic: building UIs in Playgrounds. This is a technique that the Kickstarter team uses in their app (which is open source), and I use that as a starting point, but I have developed practices around it to make it more accessible.\n\nWe'll talk about some of the benefits you get that neither Storyboards or traditional programmatic UI have (access to app behavior, animations, TDD style, very fast edit/run cycles for prototyping)\n\nThere will be some live-coding to give the feel of what it's like to do this in the context of an app (a playground that is part of a larger app project).\n",
  "id": 10,
  "language": "en",
  "outcome": "- Understanding how to work in a hybrid environment with the visual experience you get in a Storyboard, but the benefits you get from a programmatic UI (creating the UI in a playground).\n- Learning all the tips and tricks to improve your efficiency while working in hybrid mode.\n- Mastering programmatic UI will be easier because you can see the effect immediately without running the app.\n",
  "speakers": [
               17
               ],
  "subtype": "presentation",
  "title": "Sketching UI in Playgrounds"
  },
  {
  "complexity": "Advanced",
  "description": "Code signing ensures that all mobile apps come from known, trusted sources and haven't been tampered with while in transit to a user's device. Though an integral part of keeping the iOS ecosystem secure, for many developers Apple's code signing methodology remains somewhat cryptic. \n\nWe'll begin by defining code signing at a fundamental level-covering the basics of hashing and public-key cryptography-in order to gain a clear understanding of code signing before diving into Apple's implementation on iOS. Unlike other mobile platforms, code signing on iOS involves additional layers of security; we'll describe the functionality of provisioning profiles, certificates and keychains. We'll dive into why Apple's code signing is mandatory, and how it extends the concept of the chain-of-trust from the operating system to the apps, and prevents third parties from loading any potentially harmful code.\n",
  "id": 11,
  "language": "en",
  "outcome": "- Attendees can expect to walk away with a more firm understanding of why code signing is necessary, what it accomplishes, and how it protects you and your users.\n - Attendees can expect answers to questions such as:\n  - What’s a keychain for? What are certificates and provisioning profiles?\n  - How do these objects interact during the code signing process?\n  - How does code signing protect me and my users?\n - We will equip attendees with the knowledge they need to build more complex applications and successfully release apps by creating clarity around Apple’s code signing methodology.\n",
  "speakers": [
               18
               ],
  "subtype": "presentation",
  "title": "Under The Hood: Code Signing on iOS"
  },
  {
  "id": 12,
  "language": "en",
  "speakers": [
               19
               ],
  "subtype": "presentation",
  "title": "Core Bluetooth in Swift: A Primer"
  },
  {
  "complexity": "Intermediate",
  "description": "Accessibility is an often ignored part of iOS development, partly because much of it is “baked in” to the OS and “just works” most of the time. However, building custom UI elements and interactions can lead to a breakdown of accessibility. In this talk, we’ll explore VoiceOver, the screen reader that allow many disabled users to interact with your app. We’ll walk through a non-accessible app and optimize it for VoiceOver users. Finally, we’ll go over common pitfalls and solutions to keep in mind when designing and building accessible experiences.\n",
  "id": 13,
  "language": "en",
  "outcome": "- Having a better understanding of VoiceOver.\n- Understanding how run a quick accessibility audit to find places in your app that could use improvement.\n- Being able to argue why it’s important to invest in accessibility and have concrete steps on how to make an app easier to use.\n",
  "speakers": [
               20
               ],
  "subtype": "presentation",
  "title": "Designing and Building With Accessibility in Mind"
  },
  {
  "complexity": "Advanced",
  "description": "As developers we often take the text rendering system for granted. As a fundamental part of both iOS and macOS we often don't give it a second thought. It's just there. This session will explore: the transition from 7 segment LED text to the beautiful fonts we use today, translate the vocabulary designers use when describing text layout, and conclude by examining TextKit and how to get direct access to font paths.\n",
  "id": 14,
  "language": "en",
  "outcome": "A better understanding of\n- Fonts and font formats.\n- Text layout vocabulary.\n- A deeper understanding of text rendering in iOS and macOS.\n",
  "speakers": [
               21
               ],
  "subtype": "presentation",
  "title": "The Art of the Font"
  },
  {
  "complexity": "Advanced",
  "description": "As a developer who’s been bitten time and time again by Daylight Saving Time and related bugs, by now you’ve mastered the art of wrangling dates and times in Swift. Or have you? This talk will cover some of the more inscrutable topics of dates and times: how many seconds are there in a particular year? How do I get a notification to fire at exactly 9:00 AM on the user’s phone? What if my user isn’t using the Gregorian calendar and I want to draw a calendar? In this talk, we’ll cover all this and more, drawing on the Swift standard library and Apple’s system SDKs to manipulate the very fabric of time itself… or at least it’ll feel that way by the time we’re done.\n",
  "id": 15,
  "language": "en",
  "outcome": "This session covers more advanced date and time code. An attendee will be able to reliably schedule notifications in the user's local time, find dates in the future, and even work with calendars with different numbers of months, days in the week, and more!\n",
  "speakers": [
               22
               ],
  "subtype": "presentation",
  "title": "Advanced Dates and Times in Swift"
  },
  {
  "description": "Security is hard. It’s filled with complex math and obscure system details, but that isn’t why it’s hard. Security is hard because it requires a different way of thinking. It’s about what systems really do rather than what they’re supposed to do. It’s about making things fail rather than succeed. It’s about controls and response more often than code and algorithms. And at its best it’s invisible and thankless. You never know all the bad things that didn’t happen.\nSecurity is critical. In our hyper-connected systems filled with sensitive information, we need developers who understand how to think about security and how to implement secure systems. Security requires expertise, but it can’t just be left to experts. It has to be a part of every stage of development. No one wants to be the next company listed under an embarrassing headline.\n",
  "id": 1,
  "language": "en",
  "outcome": "- How to think about security and apply it at each stage of development\n- What problems security can and can’t solve\n- The basic tools and techniques attackers use\n- How to make your systems resilient against attack\n- The difference between encryption and obfuscation and how to use each correctly\n- How to authenticate users and handle passwords\n",
  "speakers": [
               14
               ],
  "subtype": "presentation",
  "title": "Secrets and Lies"
  },
  {
  "complexity": "Intermediate",
  "description": "Do you find yourself creating messy code in order to transform Swift optionals? Do you wish you harnessed the functional power of Swift more? This talk is for you! Come learn about creating elegant code with map, flatMap, filter, and reduce through some cupcake magic.  Let's make your code more Swifty!\n",
  "id": 1,
  "language": "en",
  "outcome": "- Functional programming building blocks\n- Manipulating collections with four functions: `map`, ~~`flatMap`~~ `compactMap`, `filter`, and `reduce`\n- Have good examples of how to use them in their code\n",
  "speakers": [
               24
               ],
  "subtype": "presentation",
  "title": "Functional Magic in Swift"
  },
  {
  "complexity": "Advanced",
  "description": "Part of making an iOS app an enjoyable experience involves some magic… err illusion. One of those illusions is that if a user leaves your app and it goes to the background, when they return everything will be exactly as they left it. The reality is that, with few exceptions, your app will actually be suspended, then deallocated by the operating system. Without a little trickery, when users come back to your app they’ll be greeted with a launch screen and have to start their navigation experience from scratch. Join me as we talk about some of the tricks you can use to ensure that when users come back to your app everything appears as if they never left.\n",
  "id": 16,
  "language": "en",
  "outcome": "- Why state restoration is important.\n- How to set up basic state restoration using Storyboards.\n- Best practices for restoring scroll position in TableView and UICollectionViews.\n- How to leverage the state restoration API for custom situations.\n- When to forego state restoration and just start over.\n- A few tricks for improving app launch speed.\n",
  "speakers": [
               11
               ],
  "subtype": "presentation",
  "title": "State Restoration - It’s like you never left"
  },
  {
  "complexity": "Advanced",
  "description": "In this hands on session you will build a simple iOS app using Firebase Cloud Firestore. We will include topics like getting setup with Firebase, storing data, and advanced queries. \n",
  "id": 17,
  "language": "en",
  "outcome": "- Read and write data to Firestore from an iOS app\n- Listen to changes in Firestore data in realtime\n- Use Firebase Authentication and security rules to secure Firestore data\n- Write complex Firestore queries\n",
  "speakers": [
               25
               ],
  "subtype": "workshop",
  "title": "Building an iOS app with Cloud Firestore"
  },
  {
  "description": "More speakers coming soon!",
  "id": 999,
  "speakers": [],
  "subtype": "presentation",
  "title": "Stay Tuned - more speakers coming soon!"
  }
  ]
    

